GIT Repositories are different from other repositories that they store a bunch of meta data about the history of repository.

The history is store in the directory called .git, which is hidden. 

TIL: Hidden files and directories start with a period, which tells the OS to hide them.

GIT INIT is the command to create a new repository.

When you initialize the repository, Git doesn’t create any commits for you. You’ll have to create the first commit yourself.

GIT STATUS command shows which files have changed since last commit.

QUE 1: What happens when you initialize a repository? Why do you need to do it?

ANS 1: When I initialise a repository, Git creates a snapshot of that repository. We need to do it, so as to proceed with the tracking of files.

Staging Area is the intermediate step before the commit. Git adds all the files to the statging area, before commit is made. All the files added in the staging area are then compiled as a single commit, when the commit is made.

The files are added via GIT ADD command. All the files which have been added are now tracked.

QUE 2: How is the staging area different from the working directory and the repository? What value do you think it offers?

ANS 2: Working directory is the directory where we are working, it lists all the files present in the directory. We might not be working on all the files, or may even need them.
A repository similarily would have different directories, containing different files, we might not be working on all of them.
Staging area gives us the list of all the files, on which work has been done, but the changes are not committed. So we can know, on which files, the work has been going on since the last commit.

git commit and allow you to write a commit message.

	commit message via the command line by running git commit -m "Commit message" instead of just git commit.

As soon as I typed git commit for the first time in the repository, I was prompted to tell about my user.email and user.name; which I did.
It then showed me the various options for git configuration:

Now when I typed git commit, the editor opened in a new window asking me for commit message.

** The standard Git practice is to write a commit message, as if it were a command.

If there would be nothing to commit, then the command git commit would show "nothing to commit, directory is clean".

git diff : compares working directory and staging area

git diff --staged : compares staging area and commit1

git diff coomit1 commit2 : compares two commits

QUE 2: How can you use the staging area to make sure you have one commit per logical change?

ANS 2: We can check how many files are there in the staging area and then do git diff --staged and if there are more than one logical change, then we do different commits by removing the extra files from staging area.

Linear structure for commits is good for fixing bugs, new features and updating documents.

MASTER is the name given to the main branch in most repositories.
	Eevry time a repository is created, it creates a master branch.

Labels for commits are called BRANCHES.

Branches can be checked out. If a branch is checked-out and a new commit is made, the label automatically adjusts to the new commit. The master branch also automatically checks out, without separately checking it out.

Current last commit of the branch is called the TIP of the branch.

Process of combining two commits is called merging.

GIT BRANCH is the command to create a new branch with arguments. Without arguments it shows the branches in the repository currently.

The asterisk mark in front of the master, when git branch command is made means that it is the current branch which has been checked out, ie any change made would reflect in that branch.

QUE 3: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

ANS 3: Situations like, testing a new experiment or an idea. It helps because I can test the new feature, without tinkering with the original codebase. Essentially, it helps me in making a sandbox, wherein I can test. And if it works,I can add it to the main codebase, or discard it.

So MASTER branch basically is the production code, which never breaks and then there is a BRANCH like developmental, where all the experiment is going on.

BRANCHES are good in compartmentalising the work which one is doing. They are like drawers.

You can close one drawer, and open the next one to start working on it.

Good way to wok in case of projects where multiple people are working is to have a new branch for each bug-fix or feature.

REMOTE BRANCH means some one else has created this branch.

git log --graph --oneline master

REACHABILITY : Whether a commit is reachable or not. Move from recent commit to a commit which does not have a parent.

DETACHED HEAD: Checkout a commit, it is detached from a branch, because the commit was checked out and not the branch. Any commit made in this state can be thus discarded without impacting any of the branches.

	git checkout -b new_branch_name





